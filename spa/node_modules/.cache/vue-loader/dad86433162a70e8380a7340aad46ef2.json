{"remainingRequest":"C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\src\\views\\main.vue?vue&type=template&id=c9a65f5a&scoped=true&","dependencies":[{"path":"C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\src\\views\\main.vue","mtime":1656638307558},{"path":"C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656597160517},{"path":"C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1656597163286},{"path":"C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1656597160517},{"path":"C:\\Users\\xuan'xuan\\Desktop\\mail\\spa\\node_modules\\vue-loader\\lib\\index.js","mtime":1656597162528}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}